using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PE29
{
    class Program
    {
        /*
Consider all integer combinations of ab for 2  a  5 and 2  b  5:

2^2=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2  a  100 and 2  b  100?
 * */

         static string AddLongString(string op1, string op2)
        {
            string sum = "";

            // I know the first op1 is always longer (or as long as op2);
            System.Diagnostics.Debug.Assert(op1.Length >= op2.Length);

            int carry = 0;

            int len1 = op1.Length;
            int len2 = op2.Length;

            for (int ii = 0; ii < len1; ii++)
            {
                int dig1 = int.Parse(op1.Substring(len1 - ii - 1, 1));
                int dig2;

                if (ii < len2)
                {
                    dig2 = int.Parse(op2.Substring(len2 - ii - 1, 1));
                }
                else
                {
                    dig2 = 0;
                }

                int digSum = dig1 + dig2 + carry;
                if (digSum <= 9)
                {
                    sum = "" + digSum + sum;
                    carry = 0;
                }
                else
                {
                    sum = "" + (digSum % 10) + sum;
                    carry = 1;
                }
            }
            if (carry != 0)
            {
                sum = "1" + sum;
            }
            return sum;
        }

        // Silly multiplication by multiple additions. Fast enough?
        static string BigMult(string f1, string f2)
        {
            string prod = f1;
            for (int ii = 1; ii < int.Parse(f2); ii++)
            {
                prod = AddLongString(prod, f1);
            }
            return prod;
        }

        
        static void Main(string[] args)
        {
            const int MAXROWCOL = 100;
            List<string> distinctTerms = new List<string>();

            for (int ii = 2; ii <= MAXROWCOL; ii++)
            {
                string product = "" + ii;
                string multiple = "" + ii;
                for (int jj = 2; jj <= MAXROWCOL; jj++) 
                {
                    product = BigMult(product, multiple);
                    if (!distinctTerms.Contains(product))
                    {
                        distinctTerms.Add(product);
                    }
                }
            }

            Console.WriteLine(distinctTerms.Count);
            Console.WriteLine("Press ENTER to Exit");
            Console.ReadLine();
        }
    }
}
